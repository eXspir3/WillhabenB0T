/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import gui.data.SearchBot;
import gui.data.SearchBots;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.Properties;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Frank Weber
 */
public class Willhaben_Searchbot_Client extends javax.swing.JFrame {

    public String serverAddress = null;
    public int serverPort = 50519;
    private SearchBots searchBots = new SearchBots();
    private Properties emailProps = new Properties();
    /**
     * Creates new form Willhaben_Searchbot_Client
     */
    public Willhaben_Searchbot_Client() {
        initComponents();
        setLocationRelativeTo(null);
        searchTable.setModel(new SearchTableModel(searchBots));
        
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer)searchTable.getDefaultRenderer(Object.class);
        renderer.setHorizontalAlignment( SwingConstants.CENTER ); 
    }

    public static String sendRequestAndReceiveResponse(String url, int port, String request, String codierung)
            throws Exception {
        String answer = "";

        final InetAddress host = InetAddress.getByName(url);
        //System.out.println("URL: "+url);
        //System.out.println("IP: "+host.getHostAddress());

        try (final Socket socket = new Socket(host, port)) {
            //System.out.format("Verbindung zum Host %s:%d aufgebaut!%n",host.getHostAddress(),port);

            final BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), codierung));
            writer.write(request);
            writer.flush();
            socket.shutdownOutput();

            final BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), codierung));

            final StringBuilder sb = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line).append("\n");
            }
            answer = sb.toString();
        }
        //System.out.println("Verbindung geschlossen");
        //socket.close();

        /*final InetAddress test = InetAddress.getByAddress(new byte[]{95,(byte)143,(byte)172,(byte)237});
      System.out.println("URL: "+test.getHostName());*/
        //System.out.println("Antwort: \n"+answer);
        return answer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pMain = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuSearchbot = new javax.swing.JMenu();
        menuAddBot = new javax.swing.JMenuItem();
        menuRemoveBot = new javax.swing.JMenuItem();
        menuEditBot = new javax.swing.JMenuItem();
        menuServer = new javax.swing.JMenu();
        menuConnect = new javax.swing.JMenuItem();
        menuDisconnect = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuEmailSettings = new javax.swing.JMenuItem();
        menuUserSettings = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuEditServer = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pMain.setLayout(new java.awt.BorderLayout());

        searchTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(searchTable);

        pMain.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(pMain, java.awt.BorderLayout.CENTER);

        menuSearchbot.setText("Searchbot");

        menuAddBot.setText("Add Searchbot");
        menuAddBot.setEnabled(false);
        menuAddBot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAddSearchbot(evt);
            }
        });
        menuSearchbot.add(menuAddBot);

        menuRemoveBot.setText("Remove Searchbot");
        menuRemoveBot.setEnabled(false);
        menuRemoveBot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveSearchbot(evt);
            }
        });
        menuSearchbot.add(menuRemoveBot);

        menuEditBot.setText("Edit Searchbot");
        menuEditBot.setEnabled(false);
        menuEditBot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onEditSearchbot(evt);
            }
        });
        menuSearchbot.add(menuEditBot);

        jMenuBar1.add(menuSearchbot);

        menuServer.setText("Server");

        menuConnect.setText("Connect");
        menuConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onConnect(evt);
            }
        });
        menuServer.add(menuConnect);

        menuDisconnect.setText("Disconnect");
        menuDisconnect.setEnabled(false);
        menuDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDisconnect(evt);
            }
        });
        menuServer.add(menuDisconnect);
        menuServer.add(jSeparator1);

        menuEmailSettings.setText("Email Settings");
        menuEmailSettings.setEnabled(false);
        menuEmailSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onEmailSettings(evt);
            }
        });
        menuServer.add(menuEmailSettings);

        menuUserSettings.setText("User Settings");
        menuUserSettings.setEnabled(false);
        menuUserSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onUserSettings(evt);
            }
        });
        menuServer.add(menuUserSettings);
        menuServer.add(jSeparator2);

        menuEditServer.setText("Edit server config");
        menuEditServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onEditServerConfig(evt);
            }
        });
        menuServer.add(menuEditServer);

        jMenuBar1.add(menuServer);

        jMenu1.setText("jMenu1");
        jMenu1.setFocusable(false);
        jMenu1.setRolloverEnabled(false);
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onAddSearchbot(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAddSearchbot
        final AddSearchbotDialog dlg = new AddSearchbotDialog(this,true);
        dlg.setVisible(true);
        if(dlg.pressedOK())
        {
            try {
                searchBots.addNew(new SearchBot(dlg.getBotname(), dlg.getLink(), dlg.getInterval(), dlg.getEmails()));
                searchTable.setModel(new SearchTableModel(searchBots));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_onAddSearchbot

    private void onConnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onConnect
        System.out.println(serverAddress);
        if(serverAddress!=null&&serverPort!=0){
            try {
                //final String answer = sendRequestAndReceiveResponse(serverAddress, serverPort, "Hallo Server", "utf8");
                //System.out.println("Antwort: \n" + answer);
                menuConnect.setEnabled(false);
                menuDisconnect.setEnabled(true);
                menuAddBot.setEnabled(true);
                menuRemoveBot.setEnabled(true);
                menuEditBot.setEnabled(true);
                menuEditServer.setEnabled(false);
                menuEmailSettings.setEnabled(true);
                menuUserSettings.setEnabled(true);
                
                //TODO Load configs from server
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Can't connect to server: \n\n"+e, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "There is no server defined!", "No server address", JOptionPane.INFORMATION_MESSAGE);
            serverAddress="127.0.0.1";
            onEditServerConfig(null);
        }
    }//GEN-LAST:event_onConnect

    private void onEditServerConfig(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onEditServerConfig
        final EditServerDialog dlg = new EditServerDialog(this,true);
        dlg.setIP(serverAddress);
        dlg.setPort(serverPort);
        dlg.setVisible(true);
        if(dlg.pressedOK())
        {
            serverAddress=dlg.getIpAddress();
            serverPort=dlg.getPort();
        }
    }//GEN-LAST:event_onEditServerConfig

    private void onDisconnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDisconnect
        menuConnect.setEnabled(true);
        menuDisconnect.setEnabled(false);
        menuAddBot.setEnabled(false);
        menuRemoveBot.setEnabled(false);
        menuEditBot.setEnabled(false);
        menuEditServer.setEnabled(true);
        menuEmailSettings.setEnabled(false);
        menuUserSettings.setEnabled(false);
        searchTable.setModel(new SearchTableModel(new SearchBots()));
    }//GEN-LAST:event_onDisconnect

    private void onEditSearchbot(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onEditSearchbot
        try {
            SearchBot searchBot = searchBots.get(searchTable.getSelectedRow());
            final EditSearchbotDialog dlg = new EditSearchbotDialog(this, true, 
                    searchBot.getName(), searchBot.getLink(), searchBot.getInterval(), searchBot.getEmails());
            dlg.setVisible(true);
            if(dlg.pressedOK())
            {
                searchBots.set(searchTable.getSelectedRow(), new SearchBot(dlg.getBotname(), dlg.getLink(), dlg.getInterval(), dlg.getEmails()));
                searchTable.setModel(new SearchTableModel(searchBots));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Could not edit Searchbot!\nNo searchbot selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_onEditSearchbot

    private void onRemoveSearchbot(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveSearchbot
        try {
            if(JOptionPane.showConfirmDialog(this,
                    "Do you really want to remove the Searchbot \""+searchBots.get(searchTable.getSelectedRow()).getName()+"\"?",
                    "Remove?", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
                searchBots.remove(searchTable.getSelectedRow());
                searchTable.setModel(new SearchTableModel(searchBots));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Could not remove Searchbot!\n"+ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_onRemoveSearchbot

    private void onEmailSettings(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onEmailSettings
        final EmailSettingsDialog dlg = new EmailSettingsDialog(this,true);
        dlg.setProperties(emailProps);
        dlg.setVisible(true);
        if(dlg.pressedOK())
        {
            emailProps=dlg.getEmailProperties();
        }
    }//GEN-LAST:event_onEmailSettings

    private void onUserSettings(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onUserSettings
        final UserSettingsDialog dlg = new UserSettingsDialog(this,true, "user1", "12345");
        dlg.setVisible(true);
        if(dlg.pressedOK())
        {
            System.out.println(dlg.getNewPassword());
        }
    }//GEN-LAST:event_onUserSettings

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            Properties props = new Properties();
            props.put("logoString", "");
            com.jtattoo.plaf.aluminium.AluminiumLookAndFeel.setCurrentTheme(props);
            UIManager.setLookAndFeel("com.jtattoo.plaf.aluminium.AluminiumLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Willhaben_Searchbot_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Willhaben_Searchbot_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Willhaben_Searchbot_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Willhaben_Searchbot_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Willhaben_Searchbot_Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem menuAddBot;
    private javax.swing.JMenuItem menuConnect;
    private javax.swing.JMenuItem menuDisconnect;
    private javax.swing.JMenuItem menuEditBot;
    private javax.swing.JMenuItem menuEditServer;
    private javax.swing.JMenuItem menuEmailSettings;
    private javax.swing.JMenuItem menuRemoveBot;
    private javax.swing.JMenu menuSearchbot;
    private javax.swing.JMenu menuServer;
    private javax.swing.JMenuItem menuUserSettings;
    private javax.swing.JPanel pMain;
    private javax.swing.JTable searchTable;
    // End of variables declaration//GEN-END:variables
}
